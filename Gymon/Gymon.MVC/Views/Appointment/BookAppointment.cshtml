@model Gymon.BL.ViewModels.AppointmentVM.AppointmentCreateVM

@{
    ViewData["Title"] = "Book Appointment";
}

<h2>Book an Appointment</h2>

<form method="post">
    <!-- Sport Type Select -->
    <div class="form-group">
        <label for="SportTypeId">Sport Type</label>
        <select id="sportTypeSelect" name="SportTypeId" class="form-control" onchange="getTrainersBySportType(this.value)">
            <option value="0">Select a sport type</option>
            @foreach (var sport in Model.SportTypes)
            {
                <option value="@sport.Id">@sport.Name</option>
            }
        </select>
    </div>

    <!-- Trainer Select -->
    <div class="form-group">
        <label for="TrainerId">Trainer</label>
        <select id="trainerSelect" name="TrainerId" class="form-control">
            <option value="0">Select a trainer</option>
        </select>
    </div>

    <!-- Appointment Date -->
    <div class="form-group">
        <label for="AppointmentDate">Appointment Date</label>
        <input type="date" id="appointmentDate" name="AppointmentDate" class="form-control" onchange="getAvailableSchedules(document.getElementById('trainerSelect').value)">
    </div>

    <!-- Appointment Time -->
    <div class="form-group">
        <label for="AppointmentTime">Appointment Time</label>
        <select id="appointmentTime" name="AppointmentTime" class="form-control">
            <option value="0">Select time</option>
        </select>
    </div>

    <!-- Payment Method -->
    <div class="form-group">
        <label for="PaymentMethod">Payment Method</label>
        <select id="paymentMethod" name="PaymentMethod" class="form-control">
            <option value="Online">Online</option>
            <option value="OnSite">On-site</option>
        </select>
    </div>

    <!-- Notes -->
    <div class="form-group">
        <label for="Notes">Notes</label>
        <textarea id="Notes" name="Notes" class="form-control" rows="3"></textarea>
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-primary">Book Appointment</button>
    </div>
</form>

@section Scripts {
    <script>
        async function getTrainersBySportType(sportTypeId) {
            try {
                const response = await fetch(/Appointment/GetTrainersBySportType?sportTypeId=${sportTypeId});
                if (!response.ok) {
                    throw new Error('Failed to fetch trainers');
                }
                const trainers = await response.json();

                console.log(trainers); // Konsola gelen veriyi kontrol edelim

                const trainerSelect = document.getElementById('trainerSelect');
                trainerSelect.innerHTML = ''; // Önceki seçenekleri temizle
                trainerSelect.appendChild(new Option('Select a trainer', '0')); // Varsayılan seçenek

                if (trainers.length === 0) {
                    alert('No trainers found for the selected sport type.');
                }

                // Eğitmenleri select listesine ekle
                trainers.forEach(trainer => {
                    const option = new Option(trainer.fullName, trainer.id);
                    trainerSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching trainers:', error);
                alert('There was an issue fetching trainers. Please try again.');
            }
        }

        // Fetch available schedules for the selected trainer and date
        async function getAvailableSchedules(trainerId) {
            const date = document.getElementById('appointmentDate').value;
            if (!trainerId || !date) return;

            try {
                const response = await fetch(/Appointment/GetAvailableSchedules?trainerId=${trainerId}&date=${date});
                if (!response.ok) {
                    throw new Error('Failed to fetch schedules');
                }
                const schedules = await response.json();

                const timeSelect = document.getElementById('appointmentTime');
                timeSelect.innerHTML = ''; // Clear previous options
                timeSelect.appendChild(new Option('Select time', '0')); // Default option

                if (!schedules || schedules.length === 0) {
                    alert('No available schedules for the selected trainer and date.');
                    return;
                }

                schedules.forEach(schedule => {
                    const option = new Option(${schedule.StartTime} - ${schedule.EndTime}, schedule.StartTime);
                    timeSelect.appendChild(option);
                });
            } catch (error) {
                console.error('Error fetching schedules:', error);
                alert('There was an issue fetching schedules. Please try again.');
            }
        }
    </script>
}